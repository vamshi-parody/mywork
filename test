#Create_port

#!/usr/bin/bash
 
MYRELEASE=Tester24.3FP3
MYLOGDIR=logs
MYLOG=`basename $0 .sh`_`date +%Y%m%d`.log
MYDEFS="Tester24_3_definitions"
TesterSECURITYGROUP="Tester Security Group"
export MYLOG MYDEFS TesterSECURITYGROUP
 
mkdir -p ${MYLOGDIR}
 
MYLOG=${PWD}/${MYLOGDIR}/${MYLOG}
 
echo -e "\nCreate ports for Tester started - `date`\n" | tee -a ${MYLOG}
 
 
# Verify OpenStack RC file has been run
openstack project list > /dev/null
if [ $? -ne 0 ]
then
    echo -e "Error: OpenStack RC file not executed.\n" | tee -a ${MYLOG}
    exit 1
fi
 
 
echo -e "Checking ${MYDEFS} file\n" | tee -a ${MYLOG}
 
# Check the definition file for unset / unchanged NETWORK_, SUBNET_, or IPv6 values
grep "NETWORK_" ${MYDEFS} > /dev/null
if [ $? -eq 0 ]
then
    echo -e "Error: Undefined NETWORK found\n" | tee -a ${MYLOG}
    echo -e "`grep NETWORK_ ${MYDEFS}`\n" | tee -a ${MYLOG}
    exit 2
fi
 
grep "SUBNET_" ${MYDEFS} > /dev/null
if [ $? -eq 0 ]
then
    echo -e "Error: Undefined subnet found\n" | tee -a ${MYLOG}
    echo -e "`grep SUBNET_ ${MYDEFS}`\n" | tee -a ${MYLOG}
    exit 3
fi
 
grep "IPv6_" ${MYDEFS} > /dev/null
if [ $? -eq 0 ]
then
    echo -e "Error: Undefined IPv6 found\n" | tee -a ${MYLOG}
    echo -e "`grep IPv6_ ${MYDEFS}`\n" | tee -a ${MYLOG}
    exit 4
fi
 
 
echo -e "\n\nCreating OAM ports\n" | tee -a ${MYLOG}
 
# Create ports for OAM interfaces
OAMNET=`grep ^network_oam ${MYDEFS} | awk {'print $2'}`
SUBNET=`grep ^subnet_oam ${MYDEFS} | awk {'print $2'}`
 
for MYOAM in `grep vm[1-3]_oam: ${MYDEFS} | awk {'print $1'}`
do
ETHINT=`grep ${MYOAM} ${MYDEFS} | awk {'print $2'}`
IPV6ADDR=`grep ${MYOAM} ${MYDEFS} | awk {'print $3'}`
openstack port create --network ${OAMNET} --fixed-ip subnet=${SUBNET},ip-address=${IPV6ADDR} --security-group "${TesterSECURITYGROUP}" ${ETHINT} | tee -a ${MYLOG}
done
 
 
echo -e "\n\nCreating SB ports\n" | tee -a ${MYLOG}
 
for MYSUBNET in 1 2 3
do
NETWORK=`grep ^network_sb${MYSUBNET} ${MYDEFS} | awk {'print $2'}`
SUBNET=`grep ^subnet_sb${MYSUBNET} ${MYDEFS} | awk {'print $2'}`
for MYSBVM in 1 2 3
do
PORTNAME=`grep vm${MYSBVM}_sb${MYSUBNET} ${MYDEFS} | awk {'print $2'}`
IPV6ADDR=`grep vm${MYSBVM}_sb${MYSUBNET} ${MYDEFS} | awk {'print $3'}`
openstack port create --network ${NETWORK} --fixed-ip subnet=${SUBNET},ip-address=${IPV6ADDR} --security-group "${TesterSECURITYGROUP}" ${PORTNAME} | tee -a ${MYLOG}
done
done
 
 
echo -e "\n\nCreating NB ports\n" | tee -a ${MYLOG}
 
for MYSUBNET in 1 2 3 4 5 6 7 8 9
do
NETWORK=`grep ^network_nb${MYSUBNET} ${MYDEFS} | awk {'print $2'}`
SUBNET=`grep ^subnet_nb${MYSUBNET} ${MYDEFS} | awk {'print $2'}`
for MYNBVM in 1 2 3
do
PORTNAME=`grep vm${MYNBVM}_nb${MYSUBNET} ${MYDEFS} | awk {'print $2'}`
IPV6ADDR=`grep vm${MYNBVM}_nb${MYSUBNET} ${MYDEFS} | awk {'print $3'}`
openstack port create --network ${NETWORK} --fixed-ip subnet=${SUBNET},ip-address=${IPV6ADDR} --security-group "${TesterSECURITYGROUP}" ${PORTNAME} | tee -a ${MYLOG}
done
done
 
 
echo -e "\nCreate ports for Tester finished - `date`\n" | tee -a ${MYLOG}
 
exit 0
Tester24_3_definitions

# Tester definitions for OpenStack v1.0 - December 4, 2024
 
# Site name
sitename: testernetworkname-x-y-z-02
 
# timezone
timezone: US/Central
 
# DNS servers for FQDN Lookup - space separated list
dns_servers: 2001:4888:a00:f:0:103:0:1 2001:4888:a00:f:0:103:0:2
 
# Log filesystem size - Lab = 250 (GB), Production = 1000 (GB)
logfilesystem_size: 250
 
# Network Names
network_oam: testernetworkname-x-y-z-02-EDN-OAM
network_sb1: testernetworkname-x-y-z-02-EDN-SB1-1798
network_sb2: testernetworkname-x-y-z-02-EDN-SB2-1799
network_sb3: testernetworkname-x-y-z-02-EDN-SB3-1800
network_nb1: testernetworkname-x-y-z-02-EDN-NB1-1789
network_nb2: testernetworkname-x-y-z-02-EDN-NB2-1790
network_nb3: testernetworkname-x-y-z-02-EDN-NB3-1791
network_nb4: testernetworkname-x-y-z-02-EDN-NB4-1792
network_nb5: testernetworkname-x-y-z-02-EDN-NB5-1793
network_nb6: testernetworkname-x-y-z-02-EDN-NB6-1794
network_nb7: testernetworkname-x-y-z-02-EDN-NB7-1795
network_nb8: testernetworkname-x-y-z-02-EDN-NB8-1796
network_nb9: testernetworkname-x-y-z-02-EDN-NB9-1797
 
# Subnet Names
subnet_oam: testernetworkname-x-y-z-02-EDN-OAMv6
subnet_sb1: testernetworkname-x-y-z-02-EDN-SB1-V6-1798
subnet_sb2: testernetworkname-x-y-z-02-EDN-SB2-V6-1799
subnet_sb3: testernetworkname-x-y-z-02-EDN-SB3-V6-1800
subnet_nb1: testernetworkname-x-y-z-02-EDN-NB1-V6-1789
subnet_nb2: testernetworkname-x-y-z-02-EDN-NB2-V6-1790
subnet_nb3: testernetworkname-x-y-z-02-EDN-NB3-V6-1791
subnet_nb4: testernetworkname-x-y-z-02-EDN-NB4-V6-1792
subnet_nb5: testernetworkname-x-y-z-02-EDN-NB5-V6-1793
subnet_nb6: testernetworkname-x-y-z-02-EDN-NB6-V6-1794
subnet_nb7: testernetworkname-x-y-z-02-EDN-NB7-V6-1795
subnet_nb8: testernetworkname-x-y-z-02-EDN-NB8-V6-1796
subnet_nb9: testernetworkname-x-y-z-02-EDN-NB9-V6-1797
 
# Subnet Gateway
subnet_gw: 4321:s180:b:a958:cd:28:0:1
 
#VM-1 IPv6 addresses
vm1_oam: Testervm1_eth0 4321:s180:b:a958::1
vm1_sb1: Testervm1_eth1 4321:s180:b:a29e::1
vm1_sb2: Testervm1_eth2 4321:s180:b:a29f::1
vm1_sb3: Testervm1_eth3 4321:s180:b:a2a0::1
vm1_nb1: Testervm1_eth4 4321:s180:b:a295::1
vm1_nb2: Testervm1_eth5 4321:s180:b:a296::1
vm1_nb3: Testervm1_eth6 4321:s180:b:a297::1
vm1_nb4: Testervm1_eth7 4321:s180:b:a298::1
vm1_nb5: Testervm1_eth8 4321:s180:b:a299::1
vm1_nb6: Testervm1_eth9 4321:s180:b:a29a::1
vm1_nb7: Testervm1_eth10 4321:s180:b:a29b::1
vm1_nb8: Testervm1_eth11 4321:s180:b:a29c::1
vm1_nb9: Testervm1_eth12 4321:s180:b:a29d::1
 
#VM-2 IPv6 addresses
vm2_oam: Testervm2_eth0 4321:s180:b:a958::2
vm2_sb1: Testervm2_eth1 4321:s180:b:a29e::2
vm2_sb2: Testervm2_eth2 4321:s180:b:a29f::2
vm2_sb3: Testervm2_eth3 4321:s180:b:a2a0::2
vm2_nb1: Testervm2_eth4 4321:s180:b:a295::2
vm2_nb2: Testervm2_eth5 4321:s180:b:a296::2
vm2_nb3: Testervm2_eth6 4321:s180:b:a297::2
vm2_nb4: Testervm2_eth7 4321:s180:b:a298::2
vm2_nb5: Testervm2_eth8 4321:s180:b:a299::2
vm2_nb6: Testervm2_eth9 4321:s180:b:a29a::2
vm2_nb7: Testervm2_eth10 4321:s180:b:a29b::2
vm2_nb8: Testervm2_eth11 4321:s180:b:a29c::2
vm2_nb9: Testervm2_eth12 4321:s180:b:a29d::2
 
#VM-3 IPv6 addresses
vm3_oam: Testervm3_eth0 4321:s180:b:a958::3
vm3_sb1: Testervm3_eth1 4321:s180:b:a29e::3
vm3_sb2: Testervm3_eth2 4321:s180:b:a29f::3
vm3_sb3: Testervm3_eth3 4321:s180:b:a2a0::3
vm3_nb1: Testervm3_eth4 4321:s180:b:a295::3
vm3_nb2: Testervm3_eth5 4321:s180:b:a296::3
vm3_nb3: Testervm3_eth6 4321:s180:b:a297::3
vm3_nb4: Testervm3_eth7 4321:s180:b:a298::3
vm3_nb5: Testervm3_eth8 4321:s180:b:a299::3
vm3_nb6: Testervm3_eth9 4321:s180:b:a29a::3
vm3_nb7: Testervm3_eth10 4321:s180:b:a29b::3
vm3_nb8: Testervm3_eth11 4321:s180:b:a29c::3
vm3_nb9: Testervm3_eth12 4321:s180:b:a29d::3

post_instantiation 

#!/usr/bin/bash
 
ALLFLAVORS=allflavors.txt
ALLIMAGES=allimages.txt
TesterSECURITYGROUP="Tester Security Group"
MYDEFS="Tester24_3_definitions"
MYFLAVOR=SC16-64-160
MYIMAGE=APD-NK-LGS-RHEL-79
MYIMAGEMD5=8aghsoldahdhfkabkdfka
MYLOGDIR=logs
MYLOG=`basename $0 .sh`_`date +%Y%m%d`.log
MYRELEASE=Tester24FP3
PORTLIST=portlist.txt
SECURITYGROUP=securitygroup.txt
SHOWIMAGE=showimage.txt
LOGFILESYSTEM_SIZE=`grep logfilesystem_size: ${MYDEFS} | awk {'print $2'}`
SITENAME=`grep sitename: ${MYDEFS} | awk {'print $2'}`
UPDATE_VMS=update_vms.sh
MKDIR_DATA0=make_data0.sh
TIMEZONE=`grep timezone: ${MYDEFS} | awk {'print $2'}`
 
# future variables
Tester_DELIVERY=anpd-stream-router-2409.0.80.zip
Tester_SUPPORT=Tester_support_repo_1.0.tar
Tester_UPDATE=Tester_support_update_1.0.tar
 
export ALLFLAVORS ALLIMAGES TesterSECURITYGROUP MYDEFS MYFLAVOR MYIMAGE MYIMAGEMD5 MYLOGDIR MYLOG MYRELEASE PORTLIST SECURITYGROUP SHOWIMAGE UPDATE_VMS LOGFILESYSTEM_SIZE SITENAME MKDIR_DATA0
 
 
mkdir -p ${MYLOGDIR}
 
MYLOG=${PWD}/${MYLOGDIR}/${MYLOG}
 
 
# Verify OpenStack RC file has been run
openstack project list > my_projects
if [ $? -ne 0 ]
then
    echo -e "Error: OpenStack RC file not executed.\n" | tee -a ${MYLOG}
    exit 1
fi
 
 
# Check to see if networks have LGS or Tester in the name
echo -e "Checking for LGS or Tester in the network name\n" | tee -a ${MYLOG}
egrep "LGS|Tester" my_projects > /dev/null
if [ $? -ne 0 ]
then
    echo "Error: Project does not have LGS or Tester" | tee -a ${MYLOG}
    exit 2
fi
 
 
# Ping test to each OAM interface in a loop
for MYOAM_IPV6 in `grep vm[1-3]_oam: ${MYDEFS} | awk {'print $3'}`
do
    ping6 -c2 ${MYOAM_IPV6} 2>&1 > /dev/null
    if [ $? -ne 0 ]
    then
        echo "Error: VM for `grep ${MYOAM_IPV6} ${MYDEFS}` is not reachable" | tee -a ${MYLOG}
        exit 3
    fi
done
 
 
# Get the sitename for the TesterKEY and LOGOKEY_PUB variables
SITENAME=`grep sitename ${MYDEFS} | awk {'print $2'}`
if [ $? -ne 0 ]
then
    echo -e "Error: sitename not defined in ${MYDEFS}" | tee -a ${MYLOG}
    exit 4
else
    TesterKEY="${SITENAME}-ssh"
    TesterKEY_PUB="${TesterKEY}.pub"
    export TesterKEY TesterKEY_PUB
fi
 
 
# Copy over the files for the definitions file, public key, updating the VMS
 
for MYOAM_IPV6 in `grep vm._oam ${MYDEFS} | awk {'print $3'}`
do
    echo "DEBUG MYOAM_IPV6 = ${MYOAM_IPV6}"
    echo "DEBUG TesterKEY = ${TesterKEY}"
    echo "DEBUG TesterKEY_PUB = ${TesterKEY_PUB}"
    echo "DEBUG MYDEFS = ${MYDEFS}"
    echo "DEBUG UPDATE_VMS = ${UPDATE_VMS}"
 
    scp -p -o "StrictHostKeyChecking no" -i ${TesterKEY} ${MYDEFS} cloud-user@[${MYOAM_IPV6}]:
    scp -p -o "StrictHostKeyChecking no" -i ${TesterKEY} ${UPDATE_VMS} cloud-user@[${MYOAM_IPV6}]:
    scp -p -o "StrictHostKeyChecking no" -i ${TesterKEY} ${TesterKEY_PUB} cloud-user@[${MYOAM_IPV6}]:
 
# Disable the root crontab to ping the gateway
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" cloud-user@${MYOAM_IPV6} "sudo -i crontab -r"
 
# move the update_vms.sh script to the /root folder
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" cloud-user@${MYOAM_IPV6} "sudo -i mv /home/cloud-user/${UPDATE_VMS} /root"
 
# Set the timezone
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" cloud-user@${MYOAM_IPV6} "sudo -i rm -f /etc/localtime"
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" cloud-user@${MYOAM_IPV6} "sudo -i ln -s /usr/share/zoneinfo/${TIMEZONE} /etc/localtime"
   
 
# Run the update_vms.sh script as root on each VM
#   ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" cloud-user@${MYOAM_IPV6} "sudo -i bash /home/cloud-user/${UPDATE_VMS}"
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" cloud-user@${MYOAM_IPV6} "sudo -i bash ${UPDATE_VMS}"
done
 
 
# Get the list of server IDs and names
openstack server list --sort-column Name | awk {'print $2" "$4'} | grep lgs > my_servers
 
 
# Create the volume in openstack for each VM
for MYSERVER in `cat my_servers | awk {'print $2'}`
do
openstack volume create --size ${LOGFILESYSTEM_SIZE} ${MYSERVER}_logs
done
 
 
# Get the list of volume IDs and names
openstack volume list --sort-column Name | awk {'print $2" "$4'} | grep lgs > my_volumes
 
 
# Attach each volume to their respective VM
for MYSERVERID in `cat my_servers | awk {'print $1'}`
do
MYSERVERNAME=`grep ${MYSERVERID} my_servers | awk {'print $2'}`
MYVOLUMEID=`grep ${MYSERVERNAME} my_volumes | awk {'print $1'}`
 
echo "DEBUG: MYSERVER=${MYSERVERID}"
echo "DEBUG: MYVOLUMEID=${MYVOLUMEID}"
 
 
openstack server add volume ${MYSERVERID} ${MYVOLUMEID} --device /dev/vdb
done
 
 
# Copy over the make_data0.sh script to each VM and run it as root
for MYOAM_IPV6 in `grep vm._oam ${MYDEFS} | awk {'print $3'}`
do
    scp -p -o "StrictHostKeyChecking no" -i ${TesterKEY} ${MKDIR_DATA0} Testeruser@[${MYOAM_IPV6}]:
 
# move the script to the /root folder
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" Testeruser@${MYOAM_IPV6} "sudo -i mv /home/Testeruser/${MKDIR_DATA0} /root"
 
# Run the make_data0.sh script as root on each VM
    ssh -i ${TesterKEY} -o "StrictHostKeyChecking no" Testeruser@${MYOAM_IPV6} "sudo -i bash ${MKDIR_DATA0}"
done


Create_vm

#!/usr/bin/bash
 
ALLFLAVORS=allflavors.txt
ALLIMAGES=allimages.txt
TesterSECURITYGROUP="Tester Security Group"
MYDEFS="Tester24_3_definitions"
MYFLAVOR=SC16-64-160
MYIMAGE=APD-NK-LGS-RHEL-79
MYIMAGEMD5=8aghsoldahdhfkabkdfka
MYLOGDIR=logs
MYLOG=`basename $0 .sh`_`date +%Y%m%d`.log
MYRELEASE=Tester24FP3
PORTLIST=portlist.txt
SECURITYGROUP=securitygroup.txt
SHOWIMAGE=showimage.txt
 
export ALLFLAVORS ALLIMAGES TesterSECURITYGROUP MYDEFS MYFLAVOR MYIMAGE MYIMAGEMD5 MYLOGDIR MYLOG MYRELEASE PORTLIST SECURITYGROUP SHOWIMAGE
 
mkdir -p ${MYLOGDIR}
 
MYLOG=${PWD}/${MYLOGDIR}/${MYLOG}
 
echo -e "\nCreate VMs for Tester started - `date`\n" | tee -a ${MYLOG}
 
 
# Verify OpenStack RC file has been run
openstack project list > /dev/null
if [ $? -ne 0 ]
then
    echo -e "Error: OpenStack RC file not executed.\n" | tee -a ${MYLOG}
    exit 1
fi
 
 
# List all openstack images
echo -e "Getting list of OpenStack images.\n" | tee -a ${MYLOG}
openstack image list > ${ALLIMAGES}
 
 
# Check for RHEL image
echo -e "Checking for ${MYIMAGE}" | tee -a ${MYLOG}
 
grep ${MYIMAGE} ${ALLIMAGES} > /dev/null
if [ $? -ne 0 ]
then
    echo -e "Error: ${MYIMAGE} not found\n" | tee -a ${MYLOG}
    exit 2
fi
 
 
# Get details of RHEL image
echo -e "Getting details for ${MYIMAGE}" | tee -a ${MYLOG}
FOUNDIMAGE=`grep ${MYIMAGE} ${ALLIMAGES} | awk {'print $2'}`
openstack image show ${FOUNDIMAGE} > ${SHOWIMAGE}
 
 
# Check md5sum of RHEL image
echo -e "Validating md5sum for ${MYIMAGE}" | tee -a ${MYLOG}
FOUNDMD5=`grep ${MYIMAGEMD5} ${SHOWIMAGE}` > /dev/null
if [ $? -ne 0 ]
then
    echo -e "Error: ${MYIMAGE} md5sum mismatch\n" | tee -a ${MYLOG}
    echo -e "Expected ${MYIMAGEMD5}, found ${FOUNDMD5}" | tee -a ${MYLOG}
    exit 3
fi
 
 
# Get the sitename and set the Tester key name
echo -e "Getting the site name" | tee -a ${MYLOG}
SITENAME=`grep sitename ${MYDEFS} | awk {'print $2'}`
if [ $? -ne 0 ]
then
    echo -e "Error: sitename not defined in ${MYDEFS}" | tee -a ${MYLOG}
    exit 4
else
    TesterKEY="${SITENAME}-ssh"
    TesterKEY_PUB="${TesterKEY}.pub"
    export TesterKEY TesterKEY_PUB
fi
 
 
# Delete previous ssh keys if they exist
rm -f ${TesterKEY} ${TesterKEY_PUB}
 
 
# Create the ssh key for Tester and load it into openstack
# mkdir ${MYRELEASE}
# cd ${MYRELEASE}
echo -e "Creating the ${TesterKEY} Tester ssh key" | tee -a ${MYLOG}
ssh-keygen -b 4096 -t rsa -f ${TesterKEY} -P "" | tee -a ${MYLOG}
if [ $? -ne 0 ]
then
    echo -e "Error: Unable to create ssh public key for Tester\n" | tee -a ${MYLOG}
    exit 5
else
    echo -e "Tester ssh key ${TesterKEY} created\n" | tee -a ${MYLOG}
    echo -e "Tester ${TesterKEY} public and private keys are in ${PWD}\n" | tee -a ${MYLOG}
    chmod 600 ${TesterKEY}
fi
 
# Import Tester ssh key
echo -e "Importing the ${LOGOKEY} ssh key into OpenStack\n" | tee -a ${MYLOG}
openstack keypair create --public-key ${TesterKEY}.pub ${TesterKEY} | tee -a ${MYLOG}
if [ $? -ne 0 ]
then
    echo -e "Error: Unable to import ${TesterKEY}.pub into OpenStack for Tester\n" | tee -a ${MYLOG}
    exit 6
else    
    echo -e "Tester ${TesterKEY} imported as ${TesterKEY}\n" | tee -a ${MYLOG}
fi
 
 
# TesterKEY=${MYRELEASE}/${TesterKEY}
 
# Check for OpenStack flavor
echo -e "Checking if required flavor exists in the project\n" | tee -a ${MYLOG}
openstack flavor list > ${ALLFLAVORS}
grep "$MYFLAVOR" ${ALLFLAVORS}
if [ $? -ne 0 ]
then
    echo -e "Error: Openstack flavor ${MYFLAVOR} not found\n" | tee -a ${MYLOG}
    exit 7
elif [ `cat ${ALLFLAVORS} | grep ${MYFLAVOR} | awk {'print $10'}` -ne 0 ]
then
    echo -e "Error: Ephemeral storage for ${MYFLAVOR} is not 0.\n" | tee -a ${MYLOG}
    exit 8
fi
 
 
# Check that the Tester Security Group was previously created
echo -e "Checking that ${TesterSECURITYGROUP} exists" | tee -a ${MYLOG}
openstack security group list > ${SECURITYGROUP}
grep "${TesterSECURITYGROUP}" ${SECURITYGROUP}
if [ $? -ne 0 ]
then
    echo -e "Error: OpenStack Security Group \"${TesterSECURITYGROUP}\" not found\n" | tee -a ${MYLOG}
    exit 9
fi
 
 
# Get the list of ethernet ports previously created by create_ports.sh
echo -e "Checking that required ports were created" | tee -a ${MYLOG}
openstack port list | grep Testervm | awk {'print $2 " " $4'} | sort > ${PORTLIST} | tee -a ${MYLOG}
if [ $? -ne 0 ]
then
    echo -e "Error: Openstack port list retrieval failed\n" | tee -a ${MYLOG}
    exit 10
else
# Check that 39 ports exist for the Tester project
    if [ `grep -c Testervm portlist.txt` -ne 39 ]
    then
        echo -e "Error: Too many or too few ports exist in ${PORTLIST} " | tee -a ${MYLOG}
        exit 11
    fi
fi
 
 
# Create the VMs
 
echo -e "Creating the VMs" | tee -a ${MYLOG}
for myvm in 1 2 3
do
# Get a list of the previously created ports by create_ports.sh for each VM, one at a time
    port0=`grep "Testervm${myvm}_eth0\$" ${PORTLIST} | awk {'print $1'}`
    port1=`grep "Testervm${myvm}_eth1\$" ${PORTLIST} | awk {'print $1'}`
    port2=`grep "Testervm${myvm}_eth2\$" ${PORTLIST} | awk {'print $1'}`
    port3=`grep "Testervm${myvm}_eth3\$" ${PORTLIST} | awk {'print $1'}`
    port4=`grep "Testervm${myvm}_eth4\$" ${PORTLIST} | awk {'print $1'}`
    port5=`grep "Testervm${myvm}_eth5\$" ${PORTLIST} | awk {'print $1'}`
    port6=`grep "Testervm${myvm}_eth6\$" ${PORTLIST} | awk {'print $1'}`
    port7=`grep "Testervm${myvm}_eth7\$" ${PORTLIST} | awk {'print $1'}`
    port8=`grep "Testervm${myvm}_eth8\$" ${PORTLIST} | awk {'print $1'}`
    port9=`grep "Testervm${myvm}_eth9\$" ${PORTLIST} | awk {'print $1'}`
    port10=`grep "Testervm${myvm}_eth10\$" ${PORTLIST} | awk {'print $1'}`
    port11=`grep "Testervm${myvm}_eth11\$" ${PORTLIST} | awk {'print $1'}`
    port12=`grep "Testervm${myvm}_eth12\$" ${PORTLIST} | awk {'print $1'}`
 
    echo -e "Creating VM ${myvm}" | tee -a ${MYLOG}
 
# Create all 13 NICs at server creation time
    openstack server create --image ${MYIMAGE} --flavor ${MYFLAVOR} --user-data netmgroff.sh --port ${port0} --port ${port1} --port ${port2} --port ${port3} --port ${port4} --port ${port5} --port ${port6} --port ${port7} --port ${port8} --port ${port9} --port ${port10} --port ${port11} --port ${port12} --key-name ${TesterKEY} --config-drive true --security-group "${TesterSECURITYGROUP}" --wait ${SITENAME}-vm-00${myvm} | tee -a ${MYLOG}
 
# Create only OAM NIC at server creation time
#   openstack server create --image ${MYIMAGE} --flavor ${MYFLAVOR} --user-data netmgroff.sh --port ${port0} --key-name ${TesterKEY} --config-drive true --security-group "${TesterSECURITYGROUP}" --wait ${SITENAME}-vm-00${myvm} | tee -a ${MYLOG}
 
# Wait until the system is pingable after build or restart
    echo -e "Updating networking files in vm ${myvm}" | tee -a ${MYLOG}
 
    port0_name="`grep ${port0} ${PORTLIST} | cut -f2 -d\ `"
    port0_ipv6="`grep ${port0_name} ${MYDEFS} | cut -f3 -d\ `"
 
        while true
        do
                echo "ping with c2"
                ping6 -c2 ${port0_ipv6}
        echo "sleeping for 10 sec"
        sleep 10
                echo "getting the result of ping"
                ping6 -c2 ${port0_ipv6}
                echo "result of ping is" $?
                if [ $? -eq 0 ]
                then
                        echo "ping successful, im breaking"
                        break
                fi
        done
 
done
 
# temporary files cleanup
rm -f ${ALLFLAVORS} ${ALLIMAGES} ${PORTLIST} ${SECURITYGROUP} ${SHOWIMAGE}
 
echo -e "\nCreate VMs for Tester completed - `date`\n" | tee -a ${MYLOG}
 
exit 0

get_net_sub.sh 
#!/usr/bin/bash
 
MYRELEASE=Tester24.3FP3
MYLOGDIR=logs
MYLOG=`basename $0 .sh`_`date +%Y%m%d`.log
MYDEFS_MASTER="Tester24_3_definitions_master"
MYDEFS="Tester24_3_definitions"
 
mkdir -p ${MYLOGDIR}
 
MYLOG=${PWD}/${MYLOGDIR}/${MYLOG}
 
export MYLOG MYLOGDIR MYDEFS MYDEFS_MASTER
 
 
echo -e "\nUpdating Tester ${MYDEFS} file started - `date`\n" | tee -a ${MYLOG}
 
 
# Cleanup old files if they exist
rm -rf my_networks my_networks_tmp my_subnets my_subnets_tmp
 
 
# Verify OpenStack RC file has been run
openstack project list > /dev/null
if [ $? -ne 0 ]
then
    echo "Error: OpenStack RC file not executed." | tee -a ${MYLOG}
    exit 1
fi
 
 
# Create list of available networks in the project
echo -e "Getting list of available networks\n" | tee -a ${MYLOG}
openstack network list > my_networks_tmp
if [ $? -ne 0 ]
then
    echo "Error: Unable to retreive network list" | tee -a ${MYLOG}
    exit 2
fi
 
 
# Check to see if networks have LGS or Tester in the name
echo -e "Checking for LGS or Tester in the network name\n" | tee -a ${MYLOG}
egrep "LGS|Tester" my_networks_tmp > /dev/null
if [ $? -ne 0 ]
then
    echo "Error: Project does not have LGS or Tester networks" | tee -a ${MYLOG}
    exit 3
fi
 
 
# Check to see if network has OAM, -SB and -NB networks and that 13 networks are defined
echo -e "Checking for -OAM, -SB and -NB networks\n" | tee -a ${MYLOG}
MYVALUE=`egrep -c "\-OAM|\-SB[1-3]|\-NB[1-9]" my_networks_tmp`
if [ ${MYVALUE} -ne 13 ]
then
    echo "Error: Check that 13 networks exist, 1 OAM, 3 SB and 9 NB exist - Only ${MYVALUE} networks found" | tee -a ${MYLOG}
    exit 4
fi
 
 
# put the network name and id in a new file
egrep "LGS|Tester" my_networks_tmp | egrep "\-OAM|\-SB|\-NB" | awk {' print $4 " " $2'} | sort > my_networks
rm -f my_networks_tmp
 
 
# Create list of available subnets in the project
echo -e "Getting list of available subnets\n" | tee -a ${MYLOG}
openstack subnet list > my_subnets_tmp
if [ $? -ne 0 ]
then
    echo "Error: Unable to retreive subnet list" | tee -a ${MYLOG}
    exit 5
fi
 
 
# Check to see if subnets have LGS or Tester in the name
echo -e "Checking for LGS or Tester in the subnet name\n" | tee -a ${MYLOG}
egrep "LGS|Tester" my_subnets_tmp > /dev/null
if [ $? -ne 0 ]
then
    echo "Error: Project does not have LGS or Tester subnets" | tee -a ${MYLOG}
    exit 6
fi
 
 
# Check to see if subnets have OAM, -SB and -NB subnets and that 13 subnets are defined
unset MYVALUE
echo -e "Checking for -OAM, -SB and -NB subnets\n" | tee -a ${MYLOG}
MYVALUE=`egrep -c "\-OAM|\-SB[1-3]|\-NB[1-9]" my_subnets_tmp`
if [ ${MYVALUE} -ne 13 ]
then
    echo "Error: Check that 13 subnets exist, 1 OAM, 3 SB and 9 NB exist - Only ${MYVALUE} subnets found" | tee -a ${MYLOG}
    exit 7
fi
 
 
# put the subnet name and id in a new file
egrep "LGS|Tester" my_subnets_tmp | egrep "\-OAM|\-SB|\-NB" | awk {' print $4 " " $2'} | sort > my_subnets
rm -rf my_subnets_tmp
 
 
# Copy the master file to a working file if a working file does not already exist
if [ ! -f $PWD/${MYDEFS} ]
then
    if [ -f $PWD/${MYDEFS_MASTER} ]
    then
        cp -p ${MYDEFS_MASTER} ${MYDEFS}
#       Set flag to indicate a new definitions working file was created
        MYDEFS_STATUS=1
    else
        echo "Error: ${MYDEFS_MASTER} is missing. Extract it from the delivery tarball" | tee -a ${MYLOG}
        exit 8
    fi
else
#   Set flag to indicate an existing working definitions file was found
    MYDEFS_STATUS=0
fi
 
# Populate the Network names
echo -e "Updating the network names\n" | tee -a ${MYLOG}
if [ ! -f $PWD/my_networks ]
then
    echo "Error: my_networks file is missing" | tee -a ${MYLOG}
    exit 9
else
    sed -i -e "s/NETWORK_OAM/`grep OAM my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_SB1/`grep SB1 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_SB2/`grep SB2 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_SB3/`grep SB3 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB1/`grep NB1 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB2/`grep NB2 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB3/`grep NB3 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB4/`grep NB4 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB5/`grep NB5 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB6/`grep NB6 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB7/`grep NB7 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB8/`grep NB8 my_networks | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/NETWORK_NB9/`grep NB9 my_networks | awk {'print $1'}`/" ${MYDEFS}
fi
 
 
# Populate the Subnet names
echo -e "Updating the subnet names\n" | tee -a ${MYLOG}
if [ ! -f $PWD/my_subnets ]
then
    echo "Error: my_subnets file is missing" | tee -a ${MYLOG}
    exit 10
else
    sed -i -e "s/SUBNET_OAM/`grep OAM my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_SB1/`grep SB1 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_SB2/`grep SB2 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_SB3/`grep SB3 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB1/`grep NB1 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB2/`grep NB2 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB3/`grep NB3 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB4/`grep NB4 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB5/`grep NB5 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB6/`grep NB6 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB7/`grep NB7 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB8/`grep NB8 my_subnets | awk {'print $1'}`/" ${MYDEFS}
    sed -i -e "s/SUBNET_NB9/`grep NB9 my_subnets | awk {'print $1'}`/" ${MYDEFS}
fi
 
 
echo -e "Updating the subnet gateway IPv6 address\n" | tee -a ${MYLOG}
# Remove old netmgroff.sh script and copy the netmgroff.sh_master script to a working copy
rm -f netmgroff.sh
cp -p netmgroff_master netmgroff.sh
 
 
# Get the Subnet Gateway IPv6 address for the OAM subnet
MY_OAM_GW=`grep subnet_oam: ${MYDEFS} | awk {'print $2'}`
openstack subnet show ${MY_OAM_GW} | grep gateway_ip | awk {'print $4'} > my_oam_gw
 
 
# Populate the Subnet Gateway IPv6 address
sed -i -e "s/SUBNET_GW/`cat my_oam_gw`/" ${MYDEFS}
 
 
# Add the gateway IP to the netmgroff.sh script
sed -i -e "s/MY_GATEWAY/`grep subnet_gw ${MYDEFS} | awk {'print $2'}`/" netmgroff.sh
 
 
# Make a backup of the updated file and inform user to populate the IPv6 addresses
cp -p ${MYDEFS} ${MYDEFS}_`date +%Y%m%d`
 
if [ ${MYDEFS_STATUS} -eq 1 ]
then
# New definitions file created, updates needed
    echo -e "Update the ${MYDEFS} file for the sitename, timezone, dns_servers, logfilesystem_size, IPv6 addresses (oam, sbX and nbX) for each VM NIC" | tee -a ${MYLOG}
else
    # Existing definitions file found, check for unset variables
 
    # Check for SITENAME keyword
    grep SITENAME ${MYDEFS} > /dev/null
    if [ $? -eq 0 ]
    then
        echo -e "SITENAME must be changed to the correct sitename in the ${MYDEFS} file" | tee -a ${MYLOG}
    fi
 
    # Check for TIMEZONE keyword
    grep TIMEZONE ${MYDEFS} > /dev/null
    if [ $? -eq 0 ]
    then
        echo -e "TIMEZONE must be set in the ${MYDEFS} file" | tee -a ${MYLOG}
    fi
 
    # Check for DNS_SERVERS keyword
    grep DNS_SERVERS ${MYDEFS} > /dev/null
    if [ $? -eq 0 ]
    then
        echo -e "DNS_SERVERS must be set in the ${MYDEFS} file" | tee -a ${MYLOG}
    fi
 
    # Check for LOGSIZE keyword
    grep LOGSIZE ${MYDEFS} > /dev/null
    if [ $? -eq 0 ]
    then
        echo -e "LOGSIZE must be set in the ${MYDEFS} file" | tee -a ${MYLOG}
    fi
 
    # Check for IPV6 keyword
    grep iPV6_ ${MYDEFS} > /dev/null
    if [ $? -eq 0 ]
    then
        echo -e "Unset IPV6 addresses found and all IPv6 addresses must be set in the ${MYDEFS} file" | tee -a ${MYLOG}
        grep IPV6_ ${MYDEFS} | tee -a ${MYLOG}
    fi
fi
 
echo -e "Updating Tester ${MYDEFS} file completed - `date`\n" | tee -a ${MYLOG}
 
exit 0



