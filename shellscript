#!/bin/bash

# Check dependencies
for cmd in nc ping awk; do
    if ! command -v $cmd &> /dev/null; then
        echo "Error: $cmd is not installed"
        exit 1
    fi
done

input_file="servers.csv"
output_file="server_status.csv"

check_ping() {
    local ip=$1
    ping -c 1 -W 2 $ip >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "UP"
    else
        echo "DOWN"
    fi
}

check_port() {
    local ip=$1
    local port=$2
    local result
    
    result=$(nc -vz -w 3 $ip $port 2>&1)
    exit_code=$?

    if [ $port -eq 3889 ]; then
        if [[ $result == *"refused"* ]] || [ $exit_code -eq 0 ]; then
            echo "OPEN"
        else
            echo "CLOSED"
        fi
    else
        if [[ $result == *"succeeded"* ]] || [[ $result == *"Connected"* ]]; then
            echo "OPEN"
        else
            echo "CLOSED"
        fi
    fi
}

# Initialize output file
echo "timestamp,servername,servicestatus,serverstatuscode,cmdbapp,apmnumber,applicationname,recoverygroup,subdivision,rto,It department" > "$output_file"

# Process servers
awk -F',' 'NR>1 {
    gsub(/"/, "");
    if ($1 != "" && $2 != "") {
        server=$1;
        ip=$2;
        type=$3;
        cmdbapp=$4;
        apm=$5;
        recgroup=$6;
        subdiv=$7;
        rto=$8;
        appname=$10;
        
        # Print all fields for processing
        print server","ip","type","cmdbapp","apm","appname","recgroup","subdiv","rto
    }
}' "$input_file" | while IFS=',' read -r server ip type cmdbapp apm appname recgroup subdiv rto; do
    echo "Checking server: $server"
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    ping_status=$(check_ping "$ip")
    
    # Determine port based on server type
    if [[ "${type,,}" == *"linux"* ]]; then
        port=22
    else
        port=3889
    fi
    
    service_status=$(check_port "$ip" "$port")
    it_dept="IT" # Add logic for IT department if needed
    
    echo "$timestamp,$server,$service_status,$ping_status,$cmdbapp,$apm,$appname,$recgroup,$subdiv,$rto,$it_dept" >> "$output_file"
done

echo "Scan complete."
