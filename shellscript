#!/bin/bash
# Check dependencies
for cmd in nc ping awk; do
    if ! command -v $cmd &>/dev/null; then
        echo "Error: $cmd is not installed"
        exit 1
    fi
done

# Input and output files
input_file="input.csv"
output_file="server_status.csv"

# Check if input file exists
if [[ ! -f "$input_file" ]]; then
    echo "Error: Input file $input_file not found!"
    exit 1
fi

# Function to check ping status
check_ping() {
    local ip=$1
    ping -c 1 -W 2 "$ip" >/dev/null 2>&1
    echo $([[ $? -eq 0 ]] && echo "1" || echo "0")
}

# Function to check port status
check_port() {
    local ip=$1
    local port=$2
    local result

    result=$(nc -vz -w 3 "$ip" "$port" 2>&1)
    if [ "$port" -eq 3389 ]; then
        if [[ $result == *"refused"* ]] || [[ $result == *"succeeded"* ]]; then
            echo "UP"
        else
            echo "DOWN"
        fi
    else
        if [[ $result == *"succeeded"* ]] || [[ $result == *"Connected"* ]]; then
            echo "UP"
        else
            echo "DOWN"
        fi
    fi
}

# Initialize the output CSV file with a header
echo "TimeStamp,ServerName,ServerStatus,ServerStatusCode,CMDBAppName,APMNumber,ApplicationName,RecoveryGroup,SubDivision,RTO" >"$output_file"

# Process the input CSV
awk -F',' 'NR > 1 { print $0 }' "$input_file" | while IFS=',' read -r servername serverip asserttype cmdbapp apm appname recgroup subdiv rto other_columns; do
    # Timestamp for each entry
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    # Ping status
    ping_status=$(check_ping "$serverip")

    # Port selection based on assert type
    if [[ "${asserttype,,}" == *"linux"* ]]; then
        port=22
    elif [[ "${asserttype,,}" == *"windows"* ]]; then
        port=3389
    else
        echo "Skipping $servername: Unknown AssertType $asserttype"
        continue
    fi

    # Port status
    service_status=$(check_port "$serverip" "$port")

    # Append to the output CSV
    echo "$timestamp,$servername,$service_status,$ping_status,$cmdbapp,$apm,$appname,$recgroup,$subdiv,$rto" >>"$output_file"
done

echo "Scan complete. Results saved to $output_file"
